
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecureBearSSL.h>

#include <Adafruit_Fingerprint.h>
#include <SoftwareSerial.h>

#if (defined(__AVR__) || defined(ESP8266)) && !defined(__AVR_ATmega2560__)
#define Finger_Rx D5 //D3
#define Finger_Tx  D6//D4
SoftwareSerial mySerial(Finger_Rx, Finger_Tx);

#else
// On Leonardo/M0/etc, others with hardware serial, use hardware serial!
// #0 is green wire, #1 is white
#define mySerial Serial1

#endif

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);


// oled code
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET     0
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
//oled

// On Leonardo/Micro or others with hardware serial, use those! #0 is green wire, #1 is white
// uncomment this line:
// #define mySerial Serial1

// For UNO and others without hardware serial, we must use software serial...
// pin #2 is IN from sensor (GREEN wire)
// pin #3 is OUT from arduino  (WHITE wire)
// comment these two lines if using hardware serial
String NAME;
String ID;

// Replace with your SSID and Password
const char *ssid = "Thor";
const char *password = "BigHead101";

//oled screens

uint8_t id;
#define Wifi_start_width 54
#define Wifi_start_height 49
const uint8_t PROGMEM Wifi_start_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00
  , 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00
  , 0x00, 0x1f, 0xf0, 0x1f, 0xf0, 0x00, 0x00
  , 0x00, 0x7e, 0x00, 0x00, 0xfc, 0x00, 0x00
  , 0x01, 0xf0, 0x00, 0x00, 0x1f, 0x00, 0x00
  , 0x03, 0xc0, 0x00, 0x00, 0x07, 0xc0, 0x00
  , 0x0f, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00
  , 0x1c, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00
  , 0x38, 0x00, 0x07, 0xc0, 0x00, 0x38, 0x00
  , 0x70, 0x00, 0xff, 0xfe, 0x00, 0x1e, 0x00
  , 0xe0, 0x03, 0xfc, 0x7f, 0xc0, 0x0e, 0x00
  , 0x00, 0x1f, 0x80, 0x03, 0xf0, 0x00, 0x00
  , 0x00, 0x3c, 0x00, 0x00, 0x78, 0x00, 0x00
  , 0x00, 0xf0, 0x00, 0x00, 0x1c, 0x00, 0x00
  , 0x01, 0xe0, 0x00, 0x00, 0x0c, 0x00, 0x00
  , 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x3f, 0xf8, 0x07, 0x1e, 0x00
  , 0x00, 0x00, 0xff, 0xfe, 0x1f, 0xbf, 0x80
  , 0x00, 0x03, 0xe0, 0x04, 0x7f, 0xff, 0xc0
  , 0x00, 0x07, 0x80, 0x00, 0xff, 0xff, 0xe0
  , 0x00, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xe0
  , 0x00, 0x0c, 0x00, 0x00, 0x7f, 0xff, 0xc0
  , 0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0xe0
  , 0x00, 0x00, 0x00, 0x03, 0xf8, 0x03, 0xf8
  , 0x00, 0x00, 0x07, 0xe7, 0xf9, 0xf1, 0xfc
  , 0x00, 0x00, 0x1f, 0xe7, 0xf1, 0xf9, 0xfc
  , 0x00, 0x00, 0x1f, 0xe7, 0xf3, 0xf9, 0xfc
  , 0x00, 0x00, 0x3f, 0xe7, 0xf3, 0xf9, 0xfc
  , 0x00, 0x00, 0x3f, 0xe7, 0xf1, 0xf1, 0xfc
  , 0x00, 0x00, 0x3f, 0xe3, 0xf8, 0xe3, 0xfc
  , 0x00, 0x00, 0x3f, 0xf3, 0xfc, 0x07, 0xf8
  , 0x00, 0x00, 0x1f, 0xf0, 0x7f, 0x0f, 0xc0
  , 0x00, 0x00, 0x0f, 0xe0, 0x7f, 0xff, 0xe0
  , 0x00, 0x00, 0x07, 0xc0, 0xff, 0xff, 0xe0
  , 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0
  , 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80
  , 0x00, 0x00, 0x00, 0x00, 0x1f, 0xbf, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define Wifi_connected_width 63
#define Wifi_connected_height 49
const uint8_t PROGMEM Wifi_connected_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00
  , 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00
  , 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00
  , 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00
  , 0x00, 0x3f, 0xff, 0xc0, 0x07, 0xff, 0xf8, 0x00
  , 0x00, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xfe, 0x00
  , 0x03, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 0x80
  , 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0
  , 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0
  , 0x3f, 0xe0, 0x01, 0xff, 0xff, 0x00, 0x0f, 0xf8
  , 0x7f, 0x80, 0x0f, 0xff, 0xff, 0xe0, 0x03, 0xfc
  , 0xff, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x01, 0xfe
  , 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7e
  , 0x78, 0x07, 0xff, 0xc0, 0x07, 0xff, 0xc0, 0x3c
  , 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x7f, 0xe0, 0x00
  , 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00
  , 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x07, 0xf8, 0x00
  , 0x00, 0x7f, 0x00, 0x01, 0x00, 0x01, 0xfc, 0x00
  , 0x00, 0x7e, 0x00, 0x7f, 0xfc, 0x00, 0xfc, 0x00
  , 0x00, 0x3c, 0x03, 0xff, 0xff, 0x80, 0x78, 0x00
  , 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00
  , 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00
  , 0x00, 0x00, 0x3f, 0xf0, 0x1f, 0xf8, 0x00, 0x00
  , 0x00, 0x00, 0x3f, 0x80, 0x03, 0xf8, 0x00, 0x00
  , 0x00, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x00
  , 0x00, 0x00, 0x1c, 0x00, 0x00, 0x70, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define FinPr_start_width 64
#define FinPr_start_height 64
const uint8_t PROGMEM FinPr_start_bits[] = {
  0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00
  , 0x00, 0x00, 0x0f, 0xc0, 0x0f, 0xe0, 0x00, 0x00
  , 0x00, 0x00, 0x1f, 0x00, 0x01, 0xf8, 0x00, 0x00
  , 0x00, 0x00, 0x3c, 0x00, 0x00, 0x7c, 0x00, 0x00
  , 0x00, 0x00, 0x78, 0x00, 0x00, 0x3e, 0x00, 0x00
  , 0x00, 0x00, 0xf0, 0x3f, 0xf8, 0x0f, 0x00, 0x00
  , 0x00, 0x01, 0xe0, 0xff, 0xfe, 0x07, 0x80, 0x00
  , 0x00, 0x03, 0xc3, 0xff, 0xff, 0x03, 0x80, 0x00
  , 0x00, 0x03, 0x87, 0xc0, 0x07, 0xc3, 0xc0, 0x00
  , 0x00, 0x07, 0x0f, 0x00, 0x03, 0xe1, 0xc0, 0x00
  , 0x00, 0x0f, 0x0e, 0x00, 0x00, 0xe0, 0xe0, 0x00
  , 0x00, 0x0e, 0x1c, 0x00, 0x00, 0xf0, 0xe0, 0x00
  , 0x00, 0x0c, 0x3c, 0x1f, 0xe0, 0x70, 0xe0, 0x00
  , 0x00, 0x00, 0x38, 0x3f, 0xf0, 0x38, 0x70, 0x00
  , 0x00, 0x00, 0x78, 0x78, 0xf8, 0x38, 0x70, 0x00
  , 0x00, 0x00, 0x70, 0x70, 0x3c, 0x18, 0x70, 0x00
  , 0x00, 0x00, 0xe0, 0xe0, 0x1e, 0x1c, 0x70, 0x00
  , 0x00, 0x03, 0xe1, 0xe0, 0x0e, 0x1c, 0x70, 0x00
  , 0x00, 0x0f, 0xc1, 0xc3, 0x0e, 0x1c, 0x70, 0x00
  , 0x00, 0x3f, 0x03, 0xc3, 0x8e, 0x1c, 0x70, 0x00
  , 0x00, 0x3e, 0x03, 0x87, 0x0e, 0x1c, 0x70, 0x00
  , 0x00, 0x30, 0x07, 0x07, 0x0e, 0x18, 0xe0, 0x00
  , 0x00, 0x00, 0x0e, 0x0e, 0x0e, 0x38, 0xe0, 0x00
  , 0x00, 0x00, 0x3e, 0x1e, 0x1e, 0x38, 0xe0, 0x00
  , 0x00, 0x00, 0xf8, 0x1c, 0x1c, 0x38, 0xe0, 0x00
  , 0x00, 0x03, 0xf0, 0x38, 0x3c, 0x38, 0xe0, 0x00
  , 0x00, 0x3f, 0xc0, 0xf8, 0x78, 0x38, 0xe0, 0x00
  , 0x00, 0x7f, 0x01, 0xf0, 0x70, 0x38, 0xf0, 0x00
  , 0x00, 0x78, 0x03, 0xe0, 0xe0, 0x38, 0x70, 0x00
  , 0x00, 0x00, 0x0f, 0x81, 0xe0, 0x38, 0x7c, 0x00
  , 0x00, 0x00, 0x3f, 0x03, 0xc0, 0x38, 0x3e, 0x00
  , 0x00, 0x00, 0xfc, 0x0f, 0x80, 0x38, 0x1e, 0x00
  , 0x00, 0x07, 0xf0, 0x1f, 0x1c, 0x1c, 0x04, 0x00
  , 0x00, 0x3f, 0xc0, 0x3e, 0x3f, 0x1e, 0x00, 0x00
  , 0x00, 0x7f, 0x00, 0xf8, 0x7f, 0x0f, 0x00, 0x00
  , 0x00, 0x38, 0x01, 0xf0, 0xf7, 0x07, 0xc0, 0x00
  , 0x00, 0x00, 0x07, 0xe1, 0xe3, 0x83, 0xf8, 0x00
  , 0x00, 0x00, 0x3f, 0x87, 0xc3, 0xc0, 0xfc, 0x00
  , 0x00, 0x01, 0xfe, 0x0f, 0x81, 0xe0, 0x3c, 0x00
  , 0x00, 0x0f, 0xf8, 0x1f, 0x00, 0xf0, 0x00, 0x00
  , 0x00, 0x1f, 0xc0, 0x7c, 0x00, 0x7c, 0x00, 0x00
  , 0x00, 0x1e, 0x01, 0xf8, 0x00, 0x3f, 0x00, 0x00
  , 0x00, 0x00, 0x07, 0xe0, 0x78, 0x0f, 0xc0, 0x00
  , 0x00, 0x00, 0x3f, 0x81, 0xfe, 0x07, 0xf0, 0x00
  , 0x00, 0x01, 0xfe, 0x07, 0xff, 0x01, 0xf0, 0x00
  , 0x00, 0x07, 0xf8, 0x0f, 0x87, 0x80, 0x30, 0x00
  , 0x00, 0x07, 0xc0, 0x3f, 0x03, 0xe0, 0x00, 0x00
  , 0x00, 0x06, 0x00, 0xfc, 0x01, 0xf8, 0x00, 0x00
  , 0x00, 0x00, 0x03, 0xf0, 0x00, 0x7e, 0x00, 0x00
  , 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x3f, 0x80, 0x00
  , 0x00, 0x00, 0x7f, 0x00, 0xf8, 0x0f, 0x80, 0x00
  , 0x00, 0x00, 0xfc, 0x03, 0xfe, 0x01, 0x80, 0x00
  , 0x00, 0x00, 0xf0, 0x1f, 0xff, 0x80, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x7f, 0x07, 0xe0, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0xfc, 0x03, 0xf8, 0x00, 0x00
  , 0x00, 0x00, 0x03, 0xf0, 0x00, 0x78, 0x00, 0x00
  , 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x18, 0x00, 0x00
  , 0x00, 0x00, 0x0f, 0x01, 0xf8, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x1e, 0x0e, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00
};
#define FinPr_valid_width 128
#define FinPr_valid_height 64
const uint8_t PROGMEM FinPr_valid_bits[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x70, 0x1f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0x0f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0x87, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xc7, 0xe3, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0x03, 0xf1, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xfc, 0x0f, 0xf8, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xf8, 0x7f, 0xf8, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xf1, 0xff, 0xfc, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xc3, 0xf8, 0x7e, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xc7, 0xe0, 0x1e, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x8f, 0xc0, 0x0f, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x1f, 0x8f, 0xc7, 0x1f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7e, 0x3f, 0x1f, 0xe7, 0x1f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7e, 0x3f, 0xe3, 0x9f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfc, 0x7c, 0xe3, 0x8f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xf0, 0xf8, 0xe3, 0x8f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xe1, 0xf1, 0xe7, 0xcf, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xc3, 0xe3, 0xe7, 0xc7, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x87, 0xc3, 0xc7, 0xc7, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0x87, 0x8f, 0xef, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0x0f, 0x8f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xf0, 0x7e, 0x3f, 0x1c, 0xff, 0xff,
  0xfe, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xf8, 0xff, 0x81, 0xf8, 0x7e, 0x3c, 0xff, 0xff,
  0xf8, 0xf3, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xf8, 0xfe, 0x07, 0xf0, 0xf8, 0x7c, 0x7f, 0xff,
  0xf9, 0xfb, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xf8, 0xfc, 0x1f, 0xc1, 0xf0, 0xfe, 0x3f, 0xff,
  0xf1, 0xff, 0x99, 0xc3, 0xe2, 0x3c, 0x0f, 0x1f, 0xc8, 0xfe, 0xff, 0x87, 0xe1, 0xfe, 0x1f, 0xff,
  0xf3, 0xff, 0x81, 0xf8, 0xe3, 0x3e, 0x7c, 0xc7, 0x18, 0xff, 0xfe, 0x0f, 0x87, 0xff, 0x07, 0xff,
  0xf3, 0xff, 0x8f, 0xfc, 0xe3, 0x9e, 0x78, 0xe7, 0x38, 0xff, 0xf8, 0x3f, 0x0f, 0xf7, 0xe7, 0xff,
  0xf3, 0x83, 0x9f, 0xe0, 0xe3, 0x9e, 0x78, 0xe7, 0x38, 0xff, 0xc0, 0xfc, 0x1f, 0x00, 0x7f, 0xff,
  0xf3, 0xe3, 0x9f, 0x9c, 0xe3, 0x9e, 0x78, 0x07, 0x38, 0xff, 0x03, 0xf0, 0x7c, 0x00, 0x1f, 0xff,
  0xf1, 0xe3, 0x9f, 0x1c, 0xe3, 0x9e, 0x78, 0xff, 0x38, 0xfe, 0x0f, 0xe1, 0xf8, 0x7f, 0x0f, 0xff,
  0xf1, 0xe3, 0x9f, 0x3c, 0xe3, 0x9e, 0x78, 0xff, 0x38, 0xfe, 0x7f, 0x83, 0xf1, 0xff, 0xc7, 0xff,
  0xf8, 0xe3, 0x9f, 0x18, 0xe3, 0x9e, 0x7c, 0x7f, 0x18, 0xff, 0xfe, 0x0f, 0xe3, 0xff, 0xe3, 0xff,
  0xfe, 0x0f, 0x9f, 0x80, 0xe3, 0x9f, 0x0f, 0x07, 0x88, 0xff, 0xf8, 0x3f, 0xc7, 0xff, 0xf1, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7e, 0x4f, 0xff, 0xf1, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xf8, 0x8f, 0xff, 0x38, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xf0, 0x8f, 0xfe, 0x38, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xc1, 0x9f, 0xfc, 0x78, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0x9f, 0xf8, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0x9e, 0x71, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0x8e, 0x01, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xfe, 0x8f, 0x03, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xfc, 0x8f, 0x87, 0xf9, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xc7, 0xcf, 0xf1, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xc7, 0xff, 0xe3, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xe3, 0xff, 0xc3, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xf0, 0xff, 0x87, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0x98, 0x3e, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x1c, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0x80, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
#define FinPr_invalid_width 64
#define FinPr_invalid_height 64
const uint8_t PROGMEM FinPr_invalid_bits[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x70, 0x1f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0x0f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0x87, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xc7, 0xe3, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0x03, 0xf1, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xfc, 0x0f, 0xf8, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xf8, 0x7f, 0xf8, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xf1, 0xff, 0xfc, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xc3, 0xf8, 0x7e, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xc7, 0xe0, 0x1e, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x8f, 0xc0, 0x0f, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x1f, 0x8f, 0xc7, 0x1f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7e, 0x3f, 0x1f, 0xe7, 0x1f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7e, 0x3f, 0xe3, 0x9f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfc, 0x7c, 0xe3, 0x8f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xf0, 0xf8, 0xe3, 0x8f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xe1, 0xf1, 0xe7, 0xcf, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xc3, 0xe3, 0xe7, 0xc7, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x87, 0xc3, 0xc7, 0xc7, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0x87, 0x8f, 0xef, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0x0f, 0x8f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xf0, 0x7e, 0x3f, 0x1c, 0xff, 0xff,
  0xfe, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xf8, 0xff, 0x81, 0xf8, 0x7e, 0x3c, 0xff, 0xff,
  0xf8, 0xf3, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xf8, 0xfe, 0x07, 0xf0, 0xf8, 0x7c, 0x7f, 0xff,
  0xf9, 0xfb, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xf8, 0xfc, 0x1f, 0xc1, 0xf0, 0xfe, 0x3f, 0xff,
  0xf1, 0xff, 0x99, 0xc3, 0xe2, 0x3c, 0x0f, 0x1f, 0xc8, 0xfe, 0xff, 0x87, 0xe1, 0xfe, 0x1f, 0xff,
  0xf3, 0xff, 0x81, 0xf8, 0xe3, 0x3e, 0x7c, 0xc7, 0x18, 0xff, 0xfe, 0x0f, 0x87, 0xff, 0x07, 0xff,
  0xf3, 0xff, 0x8f, 0xfc, 0xe3, 0x9e, 0x78, 0xe7, 0x38, 0xff, 0xf8, 0x3f, 0x0f, 0xf7, 0xe7, 0xff,
  0xf3, 0x83, 0x9f, 0xe0, 0xe3, 0x9e, 0x78, 0xe7, 0x38, 0xff, 0xc0, 0xfc, 0x1f, 0x00, 0x7f, 0xff,
  0xf3, 0xe3, 0x9f, 0x9c, 0xe3, 0x9e, 0x78, 0x07, 0x38, 0xff, 0x03, 0xf0, 0x7c, 0x00, 0x1f, 0xff,
  0xf1, 0xe3, 0x9f, 0x1c, 0xe3, 0x9e, 0x78, 0xff, 0x38, 0xfe, 0x0f, 0xe1, 0xf8, 0x7f, 0x0f, 0xff,
  0xf1, 0xe3, 0x9f, 0x3c, 0xe3, 0x9e, 0x78, 0xff, 0x38, 0xfe, 0x7f, 0x83, 0xf1, 0xff, 0xc7, 0xff,
  0xf8, 0xe3, 0x9f, 0x18, 0xe3, 0x9e, 0x7c, 0x7f, 0x18, 0xff, 0xfe, 0x0f, 0xe3, 0xff, 0xe3, 0xff,
  0xfe, 0x0f, 0x9f, 0x80, 0xe3, 0x9f, 0x0f, 0x07, 0x88, 0xff, 0xf8, 0x3f, 0xc7, 0xff, 0xf1, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7e, 0x4f, 0xff, 0xf1, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xf8, 0x8f, 0xff, 0x38, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xf0, 0x8f, 0xfe, 0x38, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xc1, 0x9f, 0xfc, 0x78, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0x9f, 0xf8, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0x9e, 0x71, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0x8e, 0x01, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xfe, 0x8f, 0x03, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xfc, 0x8f, 0x87, 0xf9, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xc7, 0xcf, 0xf1, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xc7, 0xff, 0xe3, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xe3, 0xff, 0xc3, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xf0, 0xff, 0x87, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0x98, 0x3e, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x1c, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0x80, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
#define FinPr_failed_width 64
#define FinPr_failed_height 64
const uint8_t PROGMEM FinPr_failed_bits[] = {
  0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0x00, 0x00
  , 0x00, 0x1e, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00
  , 0x00, 0x78, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00
  , 0x00, 0xe0, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00
  , 0x01, 0xc0, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00
  , 0x03, 0x80, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00
  , 0x07, 0x00, 0x7f, 0xe0, 0x07, 0x00, 0x00, 0x00
  , 0x06, 0x01, 0xff, 0xf8, 0x03, 0x00, 0x00, 0x00
  , 0x0c, 0x03, 0xc0, 0x3c, 0x03, 0x80, 0x00, 0x00
  , 0x1c, 0x0f, 0x00, 0x0e, 0x01, 0x80, 0x00, 0x00
  , 0x18, 0x0c, 0x00, 0x03, 0x00, 0xc0, 0x00, 0x00
  , 0x18, 0x18, 0x00, 0x01, 0x80, 0xc0, 0x00, 0x00
  , 0x30, 0x38, 0x00, 0x01, 0xc0, 0xe0, 0x00, 0x00
  , 0x30, 0x30, 0x0f, 0x00, 0xc0, 0x60, 0x00, 0x00
  , 0x30, 0x30, 0x3f, 0xc0, 0xe0, 0x60, 0x00, 0x00
  , 0x70, 0x60, 0x78, 0xe0, 0x60, 0x60, 0x00, 0x00
  , 0x60, 0x60, 0x60, 0x60, 0x60, 0x70, 0x00, 0x00
  , 0x60, 0x60, 0x60, 0x60, 0x60, 0x30, 0x00, 0x00
  , 0x60, 0x60, 0x60, 0x60, 0x30, 0x30, 0x00, 0x00
  , 0x60, 0x60, 0x60, 0x30, 0x30, 0x20, 0x00, 0x00
  , 0x60, 0x60, 0x60, 0x30, 0x30, 0x01, 0xe0, 0x00
  , 0x60, 0x60, 0x60, 0x30, 0x30, 0x0f, 0xfc, 0x00
  , 0x60, 0x60, 0x60, 0x30, 0x30, 0x3f, 0xff, 0x00
  , 0x60, 0x60, 0x60, 0x30, 0x18, 0x78, 0x03, 0x80
  , 0x60, 0x60, 0x60, 0x30, 0x1c, 0x60, 0x01, 0x80
  , 0x60, 0x60, 0x30, 0x38, 0x0c, 0xc0, 0x00, 0xc0
  , 0x00, 0x60, 0x30, 0x18, 0x00, 0xc0, 0x00, 0xc0
  , 0x00, 0x60, 0x30, 0x18, 0x00, 0xc0, 0x00, 0xc0
  , 0x00, 0xe0, 0x30, 0x0c, 0x01, 0xc0, 0x00, 0xe0
  , 0x00, 0xc0, 0x18, 0x0e, 0x01, 0xc0, 0x00, 0xe0
  , 0x60, 0xc0, 0x18, 0x07, 0x01, 0xc0, 0x00, 0xe0
  , 0x01, 0xc0, 0x1c, 0x03, 0x81, 0xc0, 0x00, 0xe0
  , 0x01, 0x80, 0x0c, 0x01, 0xc1, 0xc0, 0x00, 0xe0
  , 0x03, 0x80, 0x0e, 0x00, 0xf1, 0xc0, 0x00, 0xe0
  , 0x0f, 0x00, 0x06, 0x00, 0x01, 0xc0, 0x00, 0xe0
  , 0x3e, 0x01, 0x03, 0x00, 0x01, 0xc0, 0x00, 0xe0
  , 0x30, 0x03, 0x83, 0x80, 0x1f, 0xff, 0xff, 0xfe
  , 0x00, 0x03, 0x81, 0xc0, 0x3f, 0xff, 0xff, 0xff
  , 0x00, 0x07, 0xc0, 0xe0, 0x30, 0x00, 0x00, 0x03
  , 0x00, 0x0e, 0xc0, 0x78, 0x30, 0x00, 0x00, 0x03
  , 0x00, 0x3c, 0x60, 0x1e, 0x30, 0x00, 0x00, 0x03
  , 0x00, 0x78, 0x70, 0x0f, 0x30, 0x00, 0x00, 0x03
  , 0x03, 0xe0, 0x38, 0x03, 0x30, 0x00, 0x00, 0x03
  , 0x07, 0x80, 0x1c, 0x00, 0x30, 0x00, 0x00, 0x03
  , 0xc0, 0x00, 0x0f, 0x00, 0x30, 0x00, 0x00, 0x03
  , 0xc0, 0x00, 0x03, 0x80, 0x30, 0x01, 0xe0, 0x03
  , 0x00, 0x18, 0x01, 0xe0, 0x30, 0x03, 0xf0, 0x03
  , 0x00, 0x18, 0x00, 0x7c, 0x30, 0x07, 0x38, 0x03
  , 0x00, 0x0c, 0x00, 0x1f, 0x30, 0x06, 0x18, 0x03
  , 0x18, 0x0e, 0x00, 0x07, 0x30, 0x06, 0x18, 0x03
  , 0x0c, 0x07, 0x80, 0x00, 0x30, 0x07, 0x38, 0x03
  , 0x0e, 0x03, 0xc0, 0x00, 0x30, 0x03, 0x30, 0x03
  , 0x07, 0x00, 0xf0, 0x00, 0x30, 0x03, 0x30, 0x03
  , 0x03, 0x00, 0x7e, 0x00, 0x30, 0x03, 0x30, 0x03
  , 0x01, 0x80, 0x1f, 0xc0, 0x30, 0x03, 0x30, 0x03
  , 0x01, 0xc0, 0x03, 0xe1, 0x30, 0x07, 0xf8, 0x03
  , 0x00, 0xf0, 0x00, 0x01, 0x30, 0x03, 0xf0, 0x03
  , 0x00, 0x38, 0x00, 0x00, 0x30, 0x00, 0x00, 0x03
  , 0x00, 0x1e, 0x00, 0x00, 0x30, 0x00, 0x00, 0x03
  , 0x00, 0x07, 0xc0, 0x00, 0x30, 0x00, 0x00, 0x03
  , 0x00, 0x01, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff
  , 0x00, 0x00, 0x3f, 0x80, 0x1f, 0xff, 0xff, 0xfe
};
#define FinPr_scan_width 64
#define FinPr_scan_height 64
const uint8_t PROGMEM FinPr_scan_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x01, 0xfc, 0x7f, 0xc0, 0x00, 0x00
  , 0x00, 0x00, 0x03, 0xc0, 0x03, 0xe0, 0x00, 0x00
  , 0x00, 0x00, 0x07, 0x80, 0x00, 0xf0, 0x00, 0x00
  , 0x00, 0x00, 0x0e, 0x00, 0x00, 0x3c, 0x00, 0x00
  , 0x00, 0x00, 0x1c, 0x1f, 0xfc, 0x1c, 0x00, 0x00
  , 0x00, 0x00, 0x38, 0x7f, 0xfe, 0x0e, 0x00, 0x00
  , 0x00, 0x00, 0x78, 0xf8, 0x0f, 0x87, 0x00, 0x00
  , 0x00, 0x00, 0x71, 0xe0, 0x03, 0xc7, 0x00, 0x00
  , 0x00, 0x00, 0xe3, 0x80, 0x01, 0xc3, 0x80, 0x00
  , 0x00, 0x00, 0xc3, 0x83, 0xc0, 0xe3, 0x80, 0x00
  , 0x00, 0x00, 0xc7, 0x0f, 0xf0, 0x71, 0x80, 0x00
  , 0x00, 0x00, 0x06, 0x1f, 0xf8, 0x71, 0xc0, 0x00
  , 0x00, 0x00, 0x0e, 0x1c, 0x3c, 0x31, 0xc0, 0x00
  , 0x00, 0x00, 0x1c, 0x38, 0x1c, 0x31, 0xc0, 0x00
  , 0x00, 0x00, 0x38, 0x70, 0x0e, 0x39, 0xc0, 0x00
  , 0x00, 0x01, 0xf0, 0x71, 0x8e, 0x39, 0xc0, 0x00
  , 0x00, 0x03, 0xe0, 0xe1, 0x86, 0x31, 0xc0, 0x00
  , 0x00, 0x03, 0x81, 0xe3, 0x8e, 0x31, 0x80, 0x00
  , 0x00, 0x00, 0x03, 0xc3, 0x8e, 0x33, 0x80, 0x00
  , 0x00, 0x00, 0x07, 0x87, 0x0c, 0x73, 0x80, 0x00
  , 0x00, 0x00, 0x1f, 0x0e, 0x1c, 0x73, 0x80, 0x00
  , 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe
  , 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
  , 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
  , 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x03, 0xf0, 0x1e, 0x3e, 0x1c, 0x00, 0x00
  , 0x00, 0x03, 0x80, 0x7c, 0x77, 0x0f, 0x00, 0x00
  , 0x00, 0x00, 0x01, 0xf0, 0xe3, 0x07, 0xc0, 0x00
  , 0x00, 0x00, 0x07, 0xe3, 0xc3, 0x81, 0xf0, 0x00
  , 0x00, 0x00, 0x3f, 0x87, 0x81, 0xc0, 0x60, 0x00
  , 0x00, 0x01, 0xfc, 0x1f, 0x00, 0xf0, 0x00, 0x00
  , 0x00, 0x01, 0xe0, 0x3c, 0x00, 0x7c, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0xf8, 0x78, 0x1f, 0x00, 0x00
  , 0x00, 0x00, 0x07, 0xe0, 0xfc, 0x0f, 0xc0, 0x00
  , 0x00, 0x00, 0x3f, 0x83, 0xef, 0x03, 0xc0, 0x00
  , 0x00, 0x00, 0xfc, 0x0f, 0x87, 0x80, 0x00, 0x00
  , 0x00, 0x00, 0x70, 0x1f, 0x03, 0xe0, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x7c, 0x00, 0xf8, 0x00, 0x00
  , 0x00, 0x00, 0x01, 0xf0, 0x00, 0x3e, 0x00, 0x00
  , 0x00, 0x00, 0x0f, 0xc0, 0xf8, 0x0f, 0x00, 0x00
  , 0x00, 0x00, 0x1f, 0x03, 0xfe, 0x02, 0x00, 0x00
  , 0x00, 0x00, 0x0c, 0x0f, 0x8f, 0x80, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x3f, 0x03, 0xe0, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf0, 0x00, 0x00
  , 0x00, 0x00, 0x01, 0xe0, 0x00, 0x30, 0x00, 0x00
  , 0x00, 0x00, 0x01, 0xc0, 0xf8, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x0f, 0x8e, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//oled screens


const unsigned char placeFinger[] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0x9f, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xf8, 0x03, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xe0, 0xe0, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xc7, 0xfc, 0x3f, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0x1f, 0xff, 0x1f, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfe, 0x3f, 0x0f, 0x9f, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfe, 0x7c, 0x3f, 0xcf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfc, 0xf8, 0xff, 0xc7, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xf1, 0xfb, 0xe7, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xe7, 0xc0, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xcf, 0x8c, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x8f, 0x1f, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1e, 0x7f, 0x39, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3c, 0xf3, 0x39, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf9, 0xe3, 0x39, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xf3, 0xe7, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xc7, 0xcf, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0x9e, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1e, 0x3c, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7c, 0x78, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xf8, 0xf1, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xe3, 0xe3, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0x8e, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0x1e, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7c, 0x3e, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xf8, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xe1, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xc7, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0x01, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7c, 0x38, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xf8, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xe1, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x87, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3e, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xe3, 0xff, 0x1f, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xc7, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0x9f, 0x07, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xfe, 0x03, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xfc, 0x71, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xf9, 0xfc, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xfb, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0x0d, 0xff, 0xff, 0xff, 0xc3, 0x7f, 0xff, 0xfb, 0xdf, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff,
  0xff, 0x75, 0xff, 0xff, 0xff, 0xdd, 0x7f, 0xff, 0xfd, 0xdf, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff,
  0xff, 0x75, 0x8c, 0x31, 0x87, 0xdd, 0x43, 0x08, 0x7d, 0xb0, 0xbb, 0x5d, 0xf4, 0x18, 0x61, 0x6f,
  0xff, 0x75, 0x77, 0xae, 0xfb, 0xd9, 0x7a, 0x7f, 0xbe, 0x6e, 0xbb, 0x7c, 0x14, 0xd7, 0x7e, 0x3f,
  0xff, 0x0d, 0x06, 0x27, 0x03, 0xc3, 0x62, 0xf0, 0x3f, 0x6f, 0x3b, 0x7d, 0xf5, 0xd7, 0x40, 0x7f,
  0xff, 0x7d, 0x79, 0xfc, 0x7f, 0xdf, 0x1e, 0xf7, 0xff, 0x6f, 0x3b, 0x7d, 0xf5, 0xd7, 0x5f, 0x7f,
  0xff, 0x7d, 0x71, 0xae, 0xbb, 0xdf, 0x1a, 0x7b, 0xbf, 0x6e, 0xbb, 0x7d, 0xf5, 0xd7, 0x6e, 0x7f,
  0xff, 0x7d, 0x84, 0x31, 0x87, 0xdf, 0x43, 0x08, 0x7f, 0x70, 0xc3, 0x7d, 0xf5, 0xd8, 0x61, 0x7f,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


const unsigned char denied[] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xfe, 0x0f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0x87, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xe7, 0xc3, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0x07, 0xe1, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xfc, 0x07, 0xf1, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xf8, 0x3f, 0xf8, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xe0, 0xff, 0xfc, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xc3, 0xff, 0xfc, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x87, 0xf0, 0x3e, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x8f, 0xc0, 0x1e, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x1f, 0x87, 0x0f, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7e, 0x3f, 0x0f, 0xc7, 0x1f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xfc, 0x7e, 0x3f, 0xe7, 0x1f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xfc, 0x7f, 0xe7, 0x9f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xf8, 0xf8, 0xe7, 0x9f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xf1, 0xf0, 0xe7, 0x8f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xe3, 0xf1, 0xe7, 0x8f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0x87, 0xe3, 0xc7, 0xcf, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0x0f, 0xc7, 0xc7, 0xc7, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0x8f, 0x8f, 0xe7, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0x1f, 0x1f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xe0, 0xfc, 0x3e, 0x1c, 0xff, 0xff,
  0xff, 0x80, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0x9f, 0xff, 0x81, 0xf8, 0x7c, 0x38, 0xff, 0xff,
  0xff, 0x8e, 0x3f, 0xff, 0xff, 0xf3, 0xff, 0xff, 0x9f, 0xfe, 0x07, 0xf0, 0xf8, 0x7c, 0xff, 0xff,
  0xff, 0x8f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf8, 0x1f, 0xc1, 0xf0, 0xfc, 0x7f, 0xff,
  0xff, 0x8f, 0x1f, 0x0f, 0x99, 0xf3, 0xe1, 0xf8, 0x9f, 0xf8, 0xff, 0x87, 0xe1, 0xfe, 0x3f, 0xff,
  0xff, 0x8f, 0x9e, 0x67, 0x9c, 0xf3, 0xcc, 0xf3, 0x9f, 0xff, 0xfe, 0x0f, 0xc3, 0xbf, 0x0f, 0xff,
  0xff, 0x8f, 0x9c, 0xe3, 0x9c, 0xf3, 0x9c, 0x63, 0x9f, 0xff, 0xf8, 0x3f, 0x0f, 0xff, 0x87, 0xff,
  0xff, 0x8f, 0x9c, 0xf3, 0x9c, 0x73, 0x9e, 0x63, 0x9f, 0xff, 0xe0, 0xfe, 0x1f, 0x81, 0xe7, 0xff,
  0xff, 0x8f, 0x9c, 0x03, 0x9c, 0x73, 0x80, 0x63, 0x9f, 0xff, 0x81, 0xf8, 0x3e, 0x00, 0x3f, 0xff,
  0xff, 0x8f, 0x1c, 0xff, 0x9c, 0x73, 0x9f, 0xe3, 0x9f, 0xfc, 0x07, 0xe0, 0xf8, 0x00, 0x1f, 0xff,
  0xff, 0x8f, 0x3c, 0xff, 0x9c, 0x73, 0x9f, 0xe3, 0x9f, 0xfc, 0x3f, 0xc3, 0xf0, 0xff, 0x0f, 0xff,
  0xff, 0x8e, 0x3e, 0x7b, 0x9c, 0x73, 0xcf, 0x73, 0x1f, 0xfe, 0xff, 0x07, 0xe1, 0xff, 0xc7, 0xff,
  0xff, 0x80, 0xff, 0x07, 0x9c, 0x73, 0xe0, 0xf8, 0x9f, 0xff, 0xfc, 0x1f, 0xc7, 0xf7, 0xe3, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xc7, 0xe3, 0xf1, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xfc, 0x8f, 0xe7, 0xf1, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xf8, 0x8f, 0xff, 0xf9, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xe1, 0x9f, 0xe7, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xc3, 0x1f, 0xe7, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x1f, 0xe7, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0x1f, 0xe7, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0x1f, 0xe7, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0x9f, 0xe7, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xfd, 0x8f, 0xe7, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf0, 0x8f, 0xe7, 0xf1, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xc7, 0xe3, 0xf1, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xc7, 0xe7, 0xe3, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xe1, 0xff, 0xc7, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xf0, 0xff, 0x07, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x38, 0x00, 0x1f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1c, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0x80, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

#define buzzer D6

void setup()
{
  Serial.begin(115200);
  //mySerial.begin(9600);
  //oled

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }

  display.display();
  delay(2000); // Pause for 2 seconds
  display.clearDisplay();

  //oled

  while (!Serial);  // For Yun/Leo/Micro/Zero/...
  delay(100);
  Serial.println("\n\nAdafruit finger detect test");

  // set the data rate for the sensor serial port
  finger.begin(57600);
  delay(5);
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) {
      delay(1);
    }
  }

  finger.getTemplateCount();
  Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
  Serial.println("Waiting for valid finger...");

  Serial.print("Connecting to: ");
  Serial.print(ssid);
  WiFi.mode(WIFI_OFF);        //Prevents reconnection issue (taking too long to connect)
  delay(1000);
  WiFi.mode(WIFI_STA);
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  int timeout = 10 * 4; // 10 seconds
  while (WiFi.status() != WL_CONNECTED  && (timeout-- > 0)) {
    delay(250);
    Serial.print(".");
  }
  Serial.println("");

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Failed to connect, going back to sleep");
  }

  Serial.print("WiFi connected in: ");
  Serial.print(millis());
  Serial.print(", IP address: ");
  Serial.println(WiFi.localIP());
  display.clearDisplay();
  display.drawBitmap( 34, 0, FinPr_scan_bits, FinPr_scan_width, FinPr_scan_height, WHITE);
  display.display();
  display.clearDisplay();
  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(WHITE);        // Draw white text
  display.setCursor(0, 0);             // Start at top-left corner
  display.print(F("Connecting to \n"));
  display.setCursor(0, 50);
  display.setTextSize(2);
  display.print(ssid);
  display.drawBitmap( 73, 10, Wifi_start_bits, Wifi_start_width, Wifi_start_height, WHITE);
  display.display();
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("Connected");

  display.clearDisplay();
  display.setTextSize(2);             // Normal 1:1 pixel scale
  display.setTextColor(WHITE);        // Draw white text
  display.setCursor(8, 0);             // Start at top-left corner
  display.print(F("Connected \n"));
  display.drawBitmap( 33, 15, Wifi_connected_bits, Wifi_connected_width, Wifi_connected_height, WHITE);
  display.display();

  pinMode(buzzer, OUTPUT);
  digitalWrite(buzzer, LOW);

  delay(1000);


  display.clearDisplay();
  display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
  display.display();
}

void loop()                     // run over and over again
{
  //  digitalWrite(buzzer, LOW);
  //  display.clearDisplay();
  //  display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
  //  display.display();

  Serial.println("Looping");

  getFingerprintID();





  if (finger.fingerID == 1) {
    Serial.print("!!--");
    Serial.println(finger.fingerID);
    if (finger.confidence >= 60) {
      display.clearDisplay();
      display.drawBitmap( 0, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
      display.display();
      digitalWrite(buzzer, HIGH);
      delay(200);
      digitalWrite(buzzer, LOW);
      Serial.print("Attendace Marked for "); Serial.println(NAME);

      // Student one
      NAME = "Ripon";
      ID = "4758";

      attendance(NAME, ID);
      delay(1000);
      display.clearDisplay();
      display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
    } else {
      display.clearDisplay();
      display.drawBitmap(0, 0, denied, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
      delay(2000);
      display.clearDisplay();
      display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
    }
  }



  if (finger.fingerID == 2) {
    Serial.print("!!--");
    Serial.println(finger.fingerID);
    if (finger.confidence >= 60) {
      display.clearDisplay();
      display.drawBitmap( 0, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
      display.display();
      digitalWrite(buzzer, HIGH);
      delay(200);
      digitalWrite(buzzer, LOW);
      Serial.print("Attendace Marked for "); Serial.println(NAME);

      // Student Two
      NAME = "Selina";
      ID = "989";

      attendance(NAME, ID);
      delay(2000);
      display.clearDisplay();
      display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
    } else {
      display.clearDisplay();
      display.drawBitmap(0, 0, denied, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
      delay(2000);
      display.clearDisplay();
      display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
    }
  }


  if (finger.fingerID == 3) {
    Serial.print("!!--");
    Serial.println(finger.fingerID);
    if (finger.confidence >= 60) {
      display.clearDisplay();
      display.drawBitmap( 0, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
      display.display();
      digitalWrite(buzzer, HIGH);
      delay(200);
      digitalWrite(buzzer, LOW);
      Serial.print("Attendace Marked for "); Serial.println(NAME);

      // Student Three
      NAME = "Sathi";
      ID = "566";

      attendance(NAME, ID);
      delay(2000);
      display.clearDisplay();
      display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
    } else {
      display.clearDisplay();
      display.drawBitmap(0, 0, denied, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
      delay(2000);
      display.clearDisplay();
      display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
    }
  }


  if (finger.fingerID == 4) {
    Serial.print("!!--");
    Serial.println(finger.fingerID);
    if (finger.confidence >= 60) {
      display.clearDisplay();
      display.drawBitmap( 0, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
      display.display();
      digitalWrite(buzzer, HIGH);
      delay(200);
      digitalWrite(buzzer, LOW);
      Serial.print("Attendace Marked for "); Serial.println(NAME);

      // Student Four
      NAME = "Rahat";
      ID = "319 ";

      attendance(NAME, ID);
      delay(2000);
      display.clearDisplay();
      display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
    } else {
      display.clearDisplay();
      display.drawBitmap(0, 0, denied, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
      delay(2000);
      display.clearDisplay();
      display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
    }
  }


  if (finger.fingerID == 5) {
    Serial.print("!!--");
    Serial.println(finger.fingerID);
    if (finger.confidence >= 60) {
      display.clearDisplay();
      display.drawBitmap( 0, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
      display.display();
      digitalWrite(buzzer, HIGH);
      delay(200);
      digitalWrite(buzzer, LOW);
      Serial.print("Attendace Marked for "); Serial.println(NAME);

      // Student Two
      NAME = "Arnob";
      ID = "10";

      attendance(NAME, ID);
      delay(2000);
      display.clearDisplay();
      display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
    } else {
      display.clearDisplay();
      display.drawBitmap(0, 0, denied, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
      delay(2000);
      display.clearDisplay();
      display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
      display.display();
    }
  }




  finger.fingerID = 0;
}





// https request code
void attendance(String getName, String getID) {
  std::unique_ptr<BearSSL::WiFiClientSecure>client(new BearSSL::WiFiClientSecure);
  // Ignore SSL certificate validation
  client->setInsecure();

  //create an HTTPClient instance
  HTTPClient https;

  //Initializing an HTTPS communication using the secure client
  Serial.print("[HTTPS] begin...\n");
  if (https.begin(*client, "https://script.google.com/macros/s/AKfycbxcEjgsrh8XqN8l1_HkMorSsO-gbSMz_o_IF1eBFT_1ZKu3SocuJuBM_XIDot9VUTMyzQ/exec?voltage=" + getName + "&current=" + getID + "")) { // HTTPS
    Serial.print("[HTTPS] GET...\n");
    // start connection and send HTTP header
    int httpCode = https.GET();
    // httpCode will be negative on error
    if (httpCode > 0) {
      // HTTP header has been send and Server response header has been handled
      Serial.printf("[HTTPS] GET... code: %d\n", httpCode);
      // file found at server
      if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
        String payload = https.getString();
        Serial.println(payload);
      }
    } else {
      Serial.printf("[HTTPS] GET... failed, error: %s\n", https.errorToString(httpCode).c_str());
    }
    https.end();
  } else {
    Serial.printf("[HTTPS] Unable to connect\n");
  }
}







// fingerprint finding code
uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK success!

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK converted!
  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Did not find a match");
    display.clearDisplay();
    display.drawBitmap(0, 0, denied, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
    display.display();
    delay(2000);
    display.clearDisplay();
    display.drawBitmap(0, 0, placeFinger, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
    display.display();
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  Serial.print(" with confidence of "); Serial.println(finger.confidence);

  return finger.fingerID;
}

// returns -1 if failed, otherwise returns ID #
int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;

  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  Serial.print(" with confidence of "); Serial.println(finger.confidence);
  return finger.fingerID;
}
